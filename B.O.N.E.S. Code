/* This sketch will randomly activate a single servo for animatronic control.
    A 3-way switch is attached to pins 2-4.  When any of them have power coming 
    to them it will activate a low, med, or high activity level respectively. 
    The speed of the servo is also randomly generated.  This sketch was created
    by Dan Massey
*/

#include <Servo.h> //Include the servo library

Servo myservo;  // create servo object to control a servo

int pulseMin = 600; //set this for the minimum pulse width your servo can handle
int pulseMax = 2400; //set this for the maximum pulse width your servo can handle

int newPosition = 0;    // variable to store the servo position
int servoSpeed = 0;         //speed at which the servo moves

int pause1Min = 5000; // set this for the minimum time for pause1 (low activity)
int pause1Max = 8000; // set this for the maximum time for pause1 (low activity)

int pause2Min = 2000; // set this for the minumum time for pause1 (medium activity)
int pause2Max = 5000; // set this for the maximum time for pause1 (medium activity)

int pause3Min = 1000; // set this for the minimum time for pause1 (high activity)
int pause3Max = 2000; // set this for the maximum time for pause1 (high activity)

long randomNumber; //this variable will hold a random number generated by the random() function for the pulse width of servo 1
//int randomSpeed; //this variable will hold a random speed for the servo

long randomPause1;  //this variable will hold a random number generated by the random() function for the low activity pause time of servo 1
long randomPause2;  //this variable will hold a random number generated by the random() function for the medium activity pause time of servo 1
long randomPause3;  //this variable will hold a random number generated by the random() function for the high activity pause time of servo 1

int lowActivityInput = 3;  //variable to allow the trigger of low activity setting
int medActivityInput = 4;  //variable to allow the trigger of medium activity setting
int highActivityInput = 5;  //variable to allow the trigger of high activity setting

long  currentPosition = 0; //current position of the servo
long pos =0; //new position of the servo to move to

void setup() {

myservo.attach(9,pulseMin,pulseMax);  // (pin, min, max)

    float centerServo = (((pulseMax-pulseMin)/2) + pulseMin); //create a variable to calculate the midpoint of the servo range
    myservo.write (centerServo); //move the servo to the midpoint of its range
    delay (4000); //wait for 5 seconds to manually allign the robot head to its midpoint
    myservo.write (0); //move the servo to zero degrees
    delay (1000); //delay 1 second
    myservo.write (180); //move the servo to 180 degrees
    delay (2000); //delay 2 seconds
    myservo.write (centerServo);
    delay (2000); //wait 2 seconds
    myservo.detach(); //detach the servo so it is ready for use
    
  pinMode (lowActivityInput, INPUT);
  pinMode (medActivityInput, INPUT);
  pinMode (highActivityInput, INPUT);

 // randomNumber = random(pulseMin,pulseMax); //generate a random number between the min and max for servo (pulse width for servo)
  
  randomSeed (analogRead(A0)); // Makes the pulse width more random   

attachInterrupt (0,moveHead,FALLING); // Interrupt code to attache an interrupt at pin 2, called "moveHead" when the button is pressed
}
void loop() {
  
  randomNumber = random(pulseMin,pulseMax); //generate a random number between the min and max for servo (pulse width for servo) 
  
  randomPause1 = random(pause1Min, pause1Max); // generates a random pause time between servo movements (low activity)
  randomPause2 = random(pause2Min, pause2Max); // generates a random pause time between servo movements (medium activity)
  randomPause3 = random(pause3Min, pause3Max); // generates a random pause time between servo movements (high activity)

 
boolean lowSwitch = digitalRead (lowActivityInput); //checks to see if the low setting is High (active)
  
  if (lowSwitch == true){ // if the low setting is turned on then do the following:
    myservo.attach(9,pulseMin,pulseMax);  // (pin, min, max)
    servoSpeed = random(10,50); //chooses a random speed for the servo to move
  
  if(newPosition <= randomNumber){ //if the new servo position is less than the random number being generated
  for (pos = newPosition; pos <= randomNumber; pos += servoSpeed){ //move up to that new position based on the random speed selected
    myservo.write(pos); //write the new position to the servo
    delay (20); //delay time for the servo to catch up
    }
  }
  
  else{ //otherwise if the new position is less than the new random position
    
    for(pos = newPosition; pos >= randomNumber; pos -= servoSpeed){ //move down to the new position based on the random speed selected
      myservo.write(pos); //write the new position to the servo
      delay (20); //delay time for the servo to catch up
      }
    }
    newPosition = randomNumber; //the new position will now be the old random number
 
  delay(randomPause1); // low delays
     
  }


  boolean medSwitch = digitalRead (medActivityInput); //checks to see if the low setting is High (active)
  
  if (medSwitch == true){ // if the medium setting is turned on then do the following:
    myservo.attach(9,pulseMin,pulseMax);  // (pin, min, max)
    servoSpeed = random(10,50); //chooses a random speed for the servo to move
  
  if(newPosition <= randomNumber){ //if the new servo position is less than the random number being generated
  for (pos = newPosition; pos <= randomNumber; pos += servoSpeed){ //move up to that new position based on the random speed selected
    myservo.write(pos); //write the new position to the servo
    delay (20); //delay time for the servo to catch up
    }
  }
  
  else{ //otherwise if the new position is less than the new random position
    
    for(pos = newPosition; pos >= randomNumber; pos -= servoSpeed){ //move down to the new position based on the random speed selected
      myservo.write(pos); //write the new position to the servo
      delay (20); //delay time for the servo to catch up
      }
    }
    newPosition = randomNumber; //the new position will now be the old random number
 
  delay(randomPause2); // medium delays
     
  }

  boolean highSwitch = digitalRead (highActivityInput); //checks to see if the low setting is High (active)
  
  if (highSwitch == true){ // if the high setting is turned on then do the following:
    myservo.attach(9,pulseMin,pulseMax);  // (pin, min, max)
    servoSpeed = random(10,50); //chooses a random speed for the servo to move
  
  if(newPosition <= randomNumber){ //if the new servo position is less than the random number being generated
  for (pos = newPosition; pos <= randomNumber; pos += servoSpeed){ //move up to that new position based on the random speed selected
    myservo.write(pos); //write the new position to the servo
    delay (20); //delay time for the servo to catch up
    }
  }
  
  else{ //otherwise if the new position is less than the new random position
    
    for(pos = newPosition; pos >= randomNumber; pos -= servoSpeed){ //move down to the new position based on the random speed selected
      myservo.write(pos); //write the new position to the servo
      delay (20); //delay time for the servo to catch up
      }
    }
    newPosition = randomNumber; //the new position will now be the old random number
 
  delay(randomPause3); // short delays
     
  }

}

void moveHead () {
  
  myservo.write (pulseMin); // Interrupt Service Routine to move the head to the right side when the button is pressed
}


    
